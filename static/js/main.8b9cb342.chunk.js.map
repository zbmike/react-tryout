{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","squares","this","state","slice","calculateWinner","xIsNext","setState","renderSquare","React","Component","Game","history","Array","fill","stepNumber","length","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b9cb342.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// square become a function component so no 'render' \r\n// takes props as input and returns what should be rendered\r\nfunction Square(props) {\r\n\r\n  // instead of 'render', it 'returns' object as functions do\r\n  // #return() a button\r\n  return (\r\n    // \r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n//\r\nclass Board extends React.Component {\r\n\r\n  // functions used in render()\r\n  // called when clicked\r\n  handleClick(i) {\r\n    // use slice to create a copy of squares array\r\n    const squares = this.state.squares.slice();\r\n\r\n    // return condition to ignore clicks on clicked squares or\r\n    // there is already a winner\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    // set 'squares' of 'Board' to be the new array\r\n\r\n    this.setState({\r\n      squares: squares,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  // renders each square\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  // render in each component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // [] indicates history is an array\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  // render in each component\r\n  render() {\r\n    \r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    // calculate winner each render\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// logic\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  // for loop to test each line defined above\r\n  for (let i = 0; i < lines.length; i++) {\r\n    // get square numbers to a,b,c\r\n    const [a, b, c] = lines[i];\r\n    // === is strict equality, if the line has all same sign it declares a winner\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}